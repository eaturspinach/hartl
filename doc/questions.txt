1) is the email regex good enough?  can't you have numbers in an email
addy?
2) i found that self.encrypted_password = encrypt(self.password) more
explicit and clear than self.encrypted_password = encrypt(password)
3) remember what "secure one-way hashing" is
4) why use User.new instead of User.create! in specs?
5) so i understand if someone gets a hold of the encrypted_password
hash, they can conduct a rainbow attack.  The way to circumvent this is
to create a salt which is a hash of the password and a UTC timestamp.
The salt is then hashed with the submitted hashed password which yields
the encrypted_password hash.  However, the salt must be stored in the
database.  If someone gets a hold of the salt hash, they can hash that
with the password they're guessing (rainbow attacked), and compare that
with the encrypted_password hash (provided they got access to that
too).5) so i understand if someone gets a hold of the encrypted_password
hash, they can conduct a rainbow attack.  The way to circumvent this is
to create a salt which is a hash of the password and a UTC timestamp.
The salt is then hashed with the submitted hashed password which yields
the encrypted_password hash.  However, the salt must be stored in the
database.  If someone gets a hold of the salt hash, they can hash that
with the password they're guessing (rainbow attacked), and compare that
with the encrypted_password hash (provided they got access to that
too).5) so i understand if someone gets a hold of the encrypted_password
hash, they can conduct a rainbow attack.  The way to circumvent this is
to create a salt which is a hash of the password and a UTC timestamp.
The salt is then hashed with the submitted hashed password which yields
the encrypted_password hash.  However, the salt must be stored in the
database.  If someone gets a hold of the salt hash, they can hash that
with the password they're guessing (rainbow attacked), and compare that
with the encrypted_password hash (provided they got access to that
too).5) so i understand if someone gets a hold of the encrypted_password
hash, they can conduct a rainbow attack.  The way to circumvent this is
to create a salt which is a hash of the password and a UTC timestamp.
The salt is then hashed with the submitted hashed password which yields
the encrypted_password hash.  However, the salt must be stored in the
database.  If someone gets a hold of the salt hash, they can hash that
with the password they're guessing (rainbow attacked), and compare that
with the encrypted_password hash (provided they got access to that
too).5) so i understand if someone gets a hold of the encrypted_password
hash, they can conduct a rainbow attack.  The way to circumvent this is
to create a salt which is a hash of the password and a UTC timestamp.
The salt is then hashed with the submitted hashed password which yields
the encrypted_password hash.  However, the salt must be stored in the
database.  If someone gets a hold of the salt hash, they can hash that
with the password they're guessing (rainbow attacked), and compare that
with the encrypted_password hash (provided they got access to that too).

6) confused in tests when use get :show vs get 'show' - is there a big
difference?

7) why use  post :create, :user => @attr
vs get :show, :id => @user ?

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

8) fluently manipulaing data structures in ruby may be a weakness...hash
of hashes...how do u create that?  an array of arrays...how do you
create that?  how do you convert a hash to a json object? how do you
convert an incoming json object to a hash? etc.

9) why render when there is a an error in a form, and why redirect when
the form is successfully submitted?
